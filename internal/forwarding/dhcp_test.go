// Copyright (c) 2018-2019, AT&T Intellectual Property. All rights reserved.
// SPDX-License-Identifier: GPL-2.0-only
package forwarding

import (
	"bytes"
	"strings"
	"testing"
)

func TestReadDhcpNameserversWithMatch(t *testing.T) {
	const input = `
Wed Jul 25 10:22:27 UTC 2018
reason='RENEW'
interface='dp0s3'
new_expiry='1532600547'
new_dhcp_lease_time='86400'
medium=''
alias_ip_address=''
new_ip_address='10.156.55.202'
new_broadcast_address='10.156.55.255'
new_subnet_mask='255.255.255.192'
new_domain_name='jx756k.att.com'
new_domain_search=''
new_network_number='10.156.55.192'
new_domain_name_servers='10.156.55.193'
new_routers='10.156.55.193'
new_static_routes=''
new_dhcp_server_identifier='10.156.55.193'
new_dhcp_message_type='5'
old_ip_address='10.156.55.202'
old_subnet_mask='255.255.255.192'
old_domain_name='jx756k.att.com'
old_domain_search=''
old_domain_name_servers='10.156.55.193'
old_routers='10.156.55.193'
old_static_routes=''
`
	expected := "10.156.55.193"
	r := strings.NewReader(input)
	ns := readDhcpNameservers(r)
	if len(ns) != 1 {
		t.Fatal("didn't get expected number of name servers")

	}
	if ns[0] != expected {
		t.Fatalf("didn't get expected name server %s != %s",
			ns[0], expected)
	}
}

func TestReadDhcpNameserversWithMultipleMatches(t *testing.T) {
	const input = `
Wed Jul 25 10:22:27 UTC 2018
reason='RENEW'
interface='dp0s3'
new_expiry='1532600547'
new_dhcp_lease_time='86400'
medium=''
alias_ip_address=''
new_ip_address='10.156.55.202'
new_broadcast_address='10.156.55.255'
new_subnet_mask='255.255.255.192'
new_domain_name='jx756k.att.com'
new_domain_search=''
new_network_number='10.156.55.192'
new_domain_name_servers='10.156.55.193 8.8.8.8'
new_routers='10.156.55.193'
new_static_routes=''
new_dhcp_server_identifier='10.156.55.193'
new_dhcp_message_type='5'
old_ip_address='10.156.55.202'
old_subnet_mask='255.255.255.192'
old_domain_name='jx756k.att.com'
old_domain_search=''
old_domain_name_servers='10.156.55.193'
old_routers='10.156.55.193'
old_static_routes=''
`
	expected := []string{"10.156.55.193", "8.8.8.8"}
	r := strings.NewReader(input)
	ns := readDhcpNameservers(r)
	if len(ns) != len(expected) {
		t.Fatal("didn't get expected number of name servers")

	}
	for i, ex := range expected {
		if ns[i] != ex {
			t.Fatalf("didn't get expected name server %s != %s",
				ns[i], ex)
		}
	}
}

func TestReadDhcpNameserversNoMatch(t *testing.T) {
	const input = `
Wed Jul 25 10:22:27 UTC 2018
reason='RENEW'
interface='dp0s3'
new_expiry='1532600547'
new_dhcp_lease_time='86400'
medium=''
alias_ip_address=''
new_ip_address='10.156.55.202'
new_broadcast_address='10.156.55.255'
new_subnet_mask='255.255.255.192'
new_domain_name='jx756k.att.com'
new_domain_search=''
new_network_number='10.156.55.192'
new_routers='10.156.55.193'
new_static_routes=''
new_dhcp_server_identifier='10.156.55.193'
new_dhcp_message_type='5'
old_ip_address='10.156.55.202'
old_subnet_mask='255.255.255.192'
old_domain_name='jx756k.att.com'
old_domain_search=''
old_domain_name_servers='10.156.55.193'
old_routers='10.156.55.193'
old_static_routes=''
`
	r := strings.NewReader(input)
	ns := readDhcpNameservers(r)
	if len(ns) != 0 {
		t.Fatal("didn't get expected number of name servers")

	}
}

func TestWriteDnsmasqDhcpConfig(t *testing.T) {
	const expected = `### Autogenerated by vci-service-dns
### Note: Manual changes to this file will be lost.
server=8.8.8.8	# dhcp eth0
server=8.8.4.4	# dhcp eth0
`
	var buf bytes.Buffer
	err := writeDnsmasqDhcpConfig(&buf, "eth0",
		[]string{"8.8.8.8", "8.8.4.4"})
	if err != nil {
		t.Fatal(err)
	}
	if buf.String() != expected {
		t.Log("got", buf.String())
		t.Log("expected", expected)
		t.Fatal("didn't get expected output")
	}
}
