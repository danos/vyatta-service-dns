// Copyright (c) 2018-2019, AT&T Intellectual Property. All rights reserved.
// SPDX-License-Identifier: GPL-2.0-only
package forwarding

import (
	"bytes"
	"io/ioutil"
	"os"
	"reflect"
	"syscall"
	"testing"
	"time"

	"github.com/danos/vci-service-dns/internal/process"
)

// This is a long timeout to account for slow build workers.
const testTimeout = 10 * time.Second

func TestWriteForwardingConfig(t *testing.T) {
	config := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}
	var buf bytes.Buffer
	err := NewConfig().writeForwardingConfig(&buf, config)
	if err != nil {
		t.Fatal(err)
	}
	expected := `### Autogenerated by vci-service-dns
### Note: Manual changes to this file will be lost during
###       the next commit.
log-facility=/var/log/dnsmasq.log
no-poll
edns-packet-max=4096
interface=eth0
interface=eth1
cache-size=150
server=8.8.8.8	# statically configured
server=8.8.4.4	# statically configured
server=/jx756k.att.com/10.156.55.193	# domain-override
resolv-file=/etc/dnsmasq.conf
no-hosts
addn-hosts=/etc/hosts
conf-dir=/etc/dnsmasq.d,*.conf
`
	if buf.String() != expected {
		t.Log("got", buf.String())
		t.Log("expected", expected)
		t.Fatal("didn't get expected output")
	}
}

func TestWriteForwardingConfigMinimal(t *testing.T) {
	config := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
	}
	var buf bytes.Buffer
	err := NewConfig().writeForwardingConfig(&buf, config)
	if err != nil {
		t.Fatal(err)
	}
	expected := `### Autogenerated by vci-service-dns
### Note: Manual changes to this file will be lost during
###       the next commit.
log-facility=/var/log/dnsmasq.log
no-poll
edns-packet-max=4096
interface=eth0
interface=eth1
cache-size=150
no-hosts
addn-hosts=/etc/hosts
conf-dir=/etc/dnsmasq.d,*.conf
`
	if buf.String() != expected {
		t.Log("got", buf.String())
		t.Log("expected", expected)
		t.Fatal("didn't get expected output")
	}
}

func TestWriteEnvironmentFile(t *testing.T) {
	var buf bytes.Buffer
	err := writeEnvironmentFile(&buf, "foo.pid", "foo.conf")
	if err != nil {
		t.Fatal(err)
	}
	const expected = `### Autogenerated by vyatta-service-dns
DNSMASQ_PID_FILE=foo.pid
DNSMASQ_CONF=foo.conf
`
	if buf.String() != expected {
		t.Log("got", buf.String())
		t.Log("expected", expected)
		t.Fatal("didn't get expected output")
	}
}

type tproc struct {
	actions  chan string
	confFile string
	logFile  string

	conf string
}

func newTproc(confFile, logFile string) *tproc {
	return &tproc{
		confFile: confFile,
		logFile:  logFile,
		actions:  make(chan string, 1),
	}
}

func (p *tproc) Start() error {
	return nil
}
func (p *tproc) Stop() error {
	p.actions <- "stop"
	return nil
}
func (p *tproc) Reload() error {
	buf, err := ioutil.ReadFile(p.confFile)
	p.conf = string(buf)
	p.actions <- "reload"
	return err
}
func (p *tproc) Restart() error {
	return nil
}
func (p *tproc) Signal(signal syscall.Signal) error {
	const sample = `
Jul 23 11:57:35 dnsmasq[28935]: time 1532372255
Jul 23 11:57:35 dnsmasq[28935]: cache size 150, 83961/1213146 cache insertions re-used unexpired cache entries.
Jul 23 11:57:35 dnsmasq[28935]: queries forwarded 363690, queries answered locally 229001
Jul 23 11:57:35 dnsmasq[28935]: queries for authoritative zones 0
Jul 23 11:57:35 dnsmasq[28935]: server 10.156.55.193#53: queries sent 0, retried or failed 0
Jul 23 11:57:35 dnsmasq[28935]: server 8.8.8.8#53: queries sent 293857, retried or failed 606
Jul 23 11:57:35 dnsmasq[28935]: server 8.8.4.4#53: queries sent 114783, retried or failed 861
`
	ioutil.WriteFile(p.logFile, []byte(sample), 0644)
	return nil
}

func newTestConfig(opts ...ConfigOption) *Config {
	dopts := []ConfigOption{
		Unit("dnsmasq.service"),
		ENVFile("tmp/dnsmasq.env"),

		ConfigFile("tmp/dnsmasq.conf"),
		ConfigDir("tmp/dnsmasq.d", "*.conf"),
		DHCPConfigFileFmt("tmp/dhcpinterface-%s.conf"),
		SystemConfigFile("tmp/system.conf"),

		PIDFile("tmp/dnsmasq.pid"),
		StateFile("tmp/dnsmasq.log"),

		ResolvFile("tmp/resolv.conf"),
		HostsFile("tmp/hosts"),
		DHCPWatchFmt("tmp/dhclient_%s_lease"),
	}
	dopts = append(dopts, opts...)
	return NewConfig(dopts...)
}

func processConstructor(cons func(string) process.Process) ConfigOption {
	//This option is needed for testing but not externally for now
	return func(c *Config) {
		c.pCons = cons
	}
}

func TestConfigObjectSet(t *testing.T) {
	err := os.MkdirAll("tmp", 0755)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		os.RemoveAll("tmp")
	}()
	proc := newTproc("tmp/dnsmasq.conf", "tmp/dnsmasq.log")
	conf := newTestConfig(processConstructor(
		func(string) process.Process {
			return proc
		}))
	data := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}

	// Set the configuration
	err = conf.Set(data)
	if err != nil {
		t.Fatal(err)
	}

	// Wait for the process to get signaled
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal")
	}

	// Verify the config files that should have been written
	expectedConf := `### Autogenerated by vci-service-dns
### Note: Manual changes to this file will be lost during
###       the next commit.
log-facility=tmp/dnsmasq.log
no-poll
edns-packet-max=4096
interface=eth0
interface=eth1
cache-size=150
server=8.8.8.8	# statically configured
server=8.8.4.4	# statically configured
server=/jx756k.att.com/10.156.55.193	# domain-override
resolv-file=tmp/dnsmasq.conf
no-hosts
addn-hosts=tmp/hosts
conf-dir=tmp/dnsmasq.d,*.conf
`
	buf, err := ioutil.ReadFile("tmp/dnsmasq.conf")
	if err != nil {
		t.Fatal(err)
	}
	if string(buf) != expectedConf {
		t.Log("got", string(buf))
		t.Log("expected", expectedConf)
		t.Fatal("didn't get expected output")
	}

	expectedEnv := `### Autogenerated by vyatta-service-dns
DNSMASQ_PID_FILE=tmp/dnsmasq.pid
DNSMASQ_CONF=tmp/dnsmasq.conf
`
	buf, err = ioutil.ReadFile("tmp/dnsmasq.env")
	if err != nil {
		t.Fatal(err)
	}
	if string(buf) != expectedEnv {
		t.Log("got", string(buf))
		t.Log("expected", expectedEnv)
		t.Fatal("didn't get expected output")
	}

	// Now delete the entire configuration
	err = conf.Set(nil)
	if err != nil {
		t.Fatal(err)
	}

	// Wait for the process to stop
	select {
	case act := <-proc.actions:
		if act != "stop" {
			t.Fatalf("stop expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal")
	}

	// Verify the files that should have been removed are removed
	_, err = os.Stat("tmp/dnsmasq.conf")
	if !os.IsNotExist(err) {
		t.Fatal(err)
	}
	_, err = os.Stat("tmp/dnsmasq.env")
	if !os.IsNotExist(err) {
		t.Fatal(err)
	}
}

func TestConfigObjectGet(t *testing.T) {
	err := os.MkdirAll("tmp", 0755)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		os.RemoveAll("tmp")
	}()
	proc := newTproc("tmp/dnsmasq.conf", "tmp/dnsmasq.log")
	conf := newTestConfig(processConstructor(
		func(string) process.Process {
			return proc
		}))
	data := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}

	// Set the configuration
	err = conf.Set(data)
	if err != nil {
		t.Fatal(err)
	}

	// Wait for the process to get signaled
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal")
	}

	got := conf.Get()
	if !reflect.DeepEqual(got, data) {
		t.Log("got", got)
		t.Log("expected", data)
		t.Fatal("didn't get expected value")
	}
}

func TestStateObjectGet(t *testing.T) {
	err := os.MkdirAll("tmp", 0755)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		os.RemoveAll("tmp")
	}()
	proc := newTproc("tmp/dnsmasq.conf", "tmp/dnsmasq.log")
	conf := newTestConfig(processConstructor(
		func(string) process.Process {
			return proc
		}))
	data := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}

	// Set the configuration
	err = conf.Set(data)
	if err != nil {
		t.Fatal(err)
	}

	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal")
	}

	state := NewState(conf)
	sdata := state.Get()
	expected := &StateData{}
	expected.State.QueriesForwarded = 363690
	expected.State.QueriesAnswered = 229001
	expected.State.Cache.Size = 150
	expected.State.Cache.Entries = 1213146
	expected.State.Cache.ReusedEntries = 83961
	expected.State.Nameservers = []NameserverState{
		{
			IPAddress:              "10.156.55.193",
			Port:                   53,
			QueriesSent:            0,
			QueriesRetriedOrFailed: 0,
			Provenance:             "configuration",
			InUse:                  true,
			DomainOverrideOnly:     true,
			Domains: []string{
				"jx756k.att.com",
			},
		},
		{
			IPAddress:              "8.8.8.8",
			Port:                   53,
			QueriesSent:            293857,
			QueriesRetriedOrFailed: 606,
			Provenance:             "configuration",
			InUse:                  true,
		},
		{
			IPAddress:              "8.8.4.4",
			Port:                   53,
			QueriesSent:            114783,
			QueriesRetriedOrFailed: 861,
			Provenance:             "configuration",
			InUse:                  true,
		},
	}
	if !reflect.DeepEqual(sdata, expected) {
		t.Log("got", sdata)
		t.Log("expected", expected)
		t.Fatal("didn't get expected value")
	}
}

func TestConfigObjectSetWithSystemNameservers(t *testing.T) {
	err := os.MkdirAll("tmp", 0755)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		os.RemoveAll("tmp")
	}()
	proc := newTproc("tmp/dnsmasq.conf", "tmp/dnsmasq.log")
	conf := newTestConfig(processConstructor(
		func(string) process.Process {
			return proc
		}))
	data := &ConfigData{
		CacheSize:        150,
		ListenInterfaces: []string{"eth0", "eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		System:           true,
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}

	// Set the configuration
	err = conf.Set(data)
	if err != nil {
		t.Fatal(err)
	}

	// Wait for the process to get signaled
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal 1")
	}

	const resolvData = `
nameserver 1.1.1.1
nameserver 2.2.2.2
`
	ioutil.WriteFile("tmp/resolv.conf", []byte(resolvData), 0644)
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal 2")
	}

	_, err = os.Stat("tmp/system.conf")
	if err != nil {
		t.Fatal(err)
	}

}

func TestConfigObjectSetWithDHCPNameservers(t *testing.T) {
	err := os.MkdirAll("tmp", 0755)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		os.RemoveAll("tmp")
	}()
	proc := newTproc("tmp/dnsmasq.conf", "tmp/dnsmasq.log")
	conf := newTestConfig(processConstructor(
		func(string) process.Process {
			return proc
		}))
	data := &ConfigData{
		CacheSize:        150,
		DHCPInterfaces:   []string{"eth0"},
		ListenInterfaces: []string{"eth1"},
		Nameservers:      []string{"8.8.8.8", "8.8.4.4"},
		DomainOverrides: []struct {
			Domain string `rfc7951:"tagnode"`
			Server string `rfc7951:"server"`
		}{
			{
				Domain: "jx756k.att.com",
				Server: "10.156.55.193",
			},
		},
	}

	// Set the configuration
	err = conf.Set(data)
	if err != nil {
		t.Fatal(err)
	}

	// Wait for the process to get signaled
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal 1")
	}
	const dhcpData = `
new_domain_name_servers=1.1.1.1
new_domain_name_servers=2.2.2.2
`
	err = ioutil.WriteFile("tmp/dhclient_eth0_lease", []byte(dhcpData), 0644)
	if err != nil {
		t.Fatal(err)
	}
	select {
	case act := <-proc.actions:
		if act != "reload" {
			t.Fatalf("reload expected, got %s", act)
		}
	case <-time.After(testTimeout):
		t.Fatal("timeout waiting for reload signal 2")
	}

	_, err = os.Stat("tmp/dhcpinterface-eth0.conf")
	if err != nil {
		t.Fatal(err)
	}
}
